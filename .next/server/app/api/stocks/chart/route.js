/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/stocks/chart/route";
exports.ids = ["app/api/stocks/chart/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fstocks%2Fchart%2Froute&page=%2Fapi%2Fstocks%2Fchart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstocks%2Fchart%2Froute.ts&appDir=C%3A%5CCoding%5CAI-Trader%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CCoding%5CAI-Trader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fstocks%2Fchart%2Froute&page=%2Fapi%2Fstocks%2Fchart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstocks%2Fchart%2Froute.ts&appDir=C%3A%5CCoding%5CAI-Trader%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CCoding%5CAI-Trader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Coding_AI_Trader_src_app_api_stocks_chart_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/stocks/chart/route.ts */ \"(rsc)/./src/app/api/stocks/chart/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/stocks/chart/route\",\n        pathname: \"/api/stocks/chart\",\n        filename: \"route\",\n        bundlePath: \"app/api/stocks/chart/route\"\n    },\n    resolvedPagePath: \"C:\\\\Coding\\\\AI-Trader\\\\src\\\\app\\\\api\\\\stocks\\\\chart\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Coding_AI_Trader_src_app_api_stocks_chart_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZzdG9ja3MlMkZjaGFydCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGc3RvY2tzJTJGY2hhcnQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzdG9ja3MlMkZjaGFydCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDQ29kaW5nJTVDQUktVHJhZGVyJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDQ29kaW5nJTVDQUktVHJhZGVyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNhO0FBQzFGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxDb2RpbmdcXFxcQUktVHJhZGVyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHN0b2Nrc1xcXFxjaGFydFxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc3RvY2tzL2NoYXJ0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc3RvY2tzL2NoYXJ0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zdG9ja3MvY2hhcnQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxDb2RpbmdcXFxcQUktVHJhZGVyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHN0b2Nrc1xcXFxjaGFydFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fstocks%2Fchart%2Froute&page=%2Fapi%2Fstocks%2Fchart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstocks%2Fchart%2Froute.ts&appDir=C%3A%5CCoding%5CAI-Trader%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CCoding%5CAI-Trader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/stocks/chart/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/stocks/chart/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_korea_investment_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/korea-investment/client */ \"(rsc)/./src/lib/korea-investment/client.ts\");\n\n\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const code = searchParams.get('code');\n        const period = searchParams.get('period');\n        const unit = searchParams.get('unit') || 'day';\n        if (!code || !period) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: '올바른 종목 코드와 기간이 필요합니다.'\n            }, {\n                status: 400\n            });\n        }\n        // 한국투자증권 API에 맞는 파라미터로 변환\n        const params = convertToApiParams(period, unit);\n        const response = await (0,_lib_korea_investment_client__WEBPACK_IMPORTED_MODULE_1__.getStockChart)({\n            code,\n            ...params\n        });\n        if (!response.output2 || !Array.isArray(response.output2)) {\n            console.error('Invalid chart data format:', response);\n            throw new Error('차트 데이터 형식이 올바르지 않습니다.');\n        }\n        // API 응답 데이터를 프론트엔드 형식으로 변환\n        const chartData = response.output2.map((item)=>({\n                date: formatDate(item.stck_bsop_date, unit),\n                시가: Number(item.stck_oprc),\n                고가: Number(item.stck_hgpr),\n                저가: Number(item.stck_lwpr),\n                종가: Number(item.stck_clpr),\n                거래량: Number(item.acml_vol)\n            }));\n        // 날짜 오름차순으로 정렬\n        chartData.sort((a, b)=>a.date.localeCompare(b.date));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(chartData);\n    } catch (error) {\n        console.error('Error in chart API route:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: '차트 데이터를 가져오는데 실패했습니다.'\n        }, {\n            status: 500\n        });\n    }\n}\nfunction convertToApiParams(period, unit) {\n    // 분봉 데이터\n    if (unit === 'minute') {\n        const minuteMap = {\n            '1m': {\n                unit: '1',\n                count: 60\n            },\n            '5m': {\n                unit: '5',\n                count: 60\n            },\n            '15m': {\n                unit: '15',\n                count: 60\n            },\n            '30m': {\n                unit: '30',\n                count: 60\n            },\n            '1h': {\n                unit: '60',\n                count: 60\n            }\n        };\n        const params = minuteMap[period];\n        if (params) {\n            return {\n                period: 'D',\n                unit: params.unit,\n                count: params.count,\n                inqStrtDd: getTodayString(),\n                inqEndDd: getTodayString(),\n                trId: 'FHKST03010200' // 분봉\n            };\n        }\n    }\n    // 일/주/월봉 데이터\n    const periodMap = {\n        '1D': {\n            period: 'D',\n            count: 1,\n            trId: 'FHKST01010100'\n        },\n        '1W': {\n            period: 'W',\n            count: 1,\n            trId: 'FHKST01010200'\n        },\n        '1M': {\n            period: 'M',\n            count: 1,\n            trId: 'FHKST01010300'\n        },\n        '3M': {\n            period: 'M',\n            count: 3,\n            trId: 'FHKST01010300'\n        },\n        '6M': {\n            period: 'M',\n            count: 6,\n            trId: 'FHKST01010300'\n        },\n        '1Y': {\n            period: 'Y',\n            count: 1,\n            trId: 'FHKST01010300'\n        }\n    };\n    const params = periodMap[period];\n    if (params) {\n        return {\n            period: params.period,\n            count: params.count,\n            trId: params.trId\n        };\n    }\n    // 기본값: 일봉 1개월\n    return {\n        period: 'D',\n        count: 30,\n        trId: 'FHKST01010100'\n    };\n}\nfunction formatDate(date, unit) {\n    if (unit === 'minute') {\n        // 분봉 데이터의 경우 시:분 형식으로 변환\n        return `${date.slice(8, 10)}:${date.slice(10, 12)}`;\n    }\n    // 일/주/월봉 데이터의 경우 YYYY-MM-DD 형식으로 변환\n    return `${date.slice(0, 4)}-${date.slice(4, 6)}-${date.slice(6, 8)}`;\n}\nfunction getTodayString() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}${month}${day}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/stocks/chart/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/korea-investment/client.ts":
/*!********************************************!*\
  !*** ./src/lib/korea-investment/client.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAJOR_STOCKS: () => (/* binding */ MAJOR_STOCKS),\n/* harmony export */   getAccessToken: () => (/* binding */ getAccessToken),\n/* harmony export */   getInitialStockList: () => (/* binding */ getInitialStockList),\n/* harmony export */   getKospiStockList: () => (/* binding */ getKospiStockList),\n/* harmony export */   getKospiStocks: () => (/* binding */ getKospiStocks),\n/* harmony export */   getStockChart: () => (/* binding */ getStockChart),\n/* harmony export */   getStockPricesFromDB: () => (/* binding */ getStockPricesFromDB),\n/* harmony export */   updateAllStockPrices: () => (/* binding */ updateAllStockPrices),\n/* harmony export */   updateStockPriceInDB: () => (/* binding */ updateStockPriceInDB)\n/* harmony export */ });\n/* harmony import */ var _types_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/error */ \"(rsc)/./src/types/error.ts\");\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/client */ \"(rsc)/./src/lib/supabase/client.ts\");\n\n\nconst BASE_URL = 'https://openapi.koreainvestment.com:9443';\n// 토큰 캐싱을 위한 전역 변수\nlet cachedToken = null;\nlet tokenExpiry = null;\nlet tokenRequestPromise = null; // 동시 요청 방지용\n// 토큰 발급 요청 제한 관리를 위한 변수\nlet lastTokenRequestTime = null;\nconst TOKEN_REQUEST_INTERVAL = 60000; // 1분(60초)\n// 주요 KOSPI 종목 리스트\nconst MAJOR_STOCKS = [\n    {\n        code: '005930',\n        name: '삼성전자',\n        sector: '전기전자'\n    },\n    {\n        code: '000660',\n        name: 'SK하이닉스',\n        sector: '전기전자'\n    },\n    {\n        code: '005935',\n        name: '삼성전자우',\n        sector: '전기전자'\n    },\n    {\n        code: '005380',\n        name: '현대차',\n        sector: '운수장비'\n    },\n    {\n        code: '035420',\n        name: 'NAVER',\n        sector: '서비스업'\n    },\n    {\n        code: '051910',\n        name: 'LG화학',\n        sector: '화학'\n    },\n    {\n        code: '005490',\n        name: 'POSCO홀딩스',\n        sector: '철강금속'\n    },\n    {\n        code: '035720',\n        name: '카카오',\n        sector: '서비스업'\n    },\n    {\n        code: '006400',\n        name: '삼성SDI',\n        sector: '전기전자'\n    },\n    {\n        code: '068270',\n        name: '셀트리온',\n        sector: '의약품'\n    },\n    {\n        code: '000270',\n        name: '기아',\n        sector: '운수장비'\n    },\n    {\n        code: '105560',\n        name: 'KB금융',\n        sector: '금융업'\n    },\n    {\n        code: '055550',\n        name: '신한지주',\n        sector: '금융업'\n    },\n    {\n        code: '002630',\n        name: '오리엔트바이오',\n        sector: '의약품'\n    },\n    {\n        code: '096770',\n        name: 'SK이노베이션',\n        sector: '화학'\n    }\n];\n// 시가총액 상위 종목만 먼저 반환하는 함수\nasync function getInitialStockList() {\n    return MAJOR_STOCKS.map((stock)=>({\n            mksc_shrn_iscd: stock.code,\n            hts_kor_isnm: stock.name,\n            bstp_cls_code: '',\n            bstp_kor_isnm: stock.sector\n        }));\n}\n// 전체 종목 리스트는 필요할 때만 호출\nasync function getKospiStockList() {\n    try {\n        // 먼저 주요 종목 반환\n        const majorStocks = await getInitialStockList();\n        // 전체 목록이 필요한 경우에만 API 호출\n        const token = await getAccessToken();\n        const url = new URL(`${BASE_URL}/uapi/domestic-stock/v1/quotations/kospi-quotations`);\n        url.searchParams.append('servicekey', \"PS1rVcaHoaeogJqwa19KaCneBYEw07bymPiX\");\n        const response = await fetch(url, {\n            headers: {\n                'content-type': 'application/json',\n                authorization: `Bearer ${token}`,\n                appkey: \"PS1rVcaHoaeogJqwa19KaCneBYEw07bymPiX\",\n                appsecret: \"q5NUDhtegTL+n8CgqmyTCB12orbBI0EljxtH3UJ7OkNzbh4vbPiEjqQCnnTAtxIqUWIvcDQZ9a667ygwDCHrBFroKYny3MkD/Y0J+H4qNZAYfwBIe3gxZqoNXi1lQ5TFVK22gK8wiMLQ2bznUfUMgdWqy0MpCcyJ2+3T5yoGRj4O4DfxsZI=\",\n                tr_id: 'HHDFS00000300',\n                custtype: 'P'\n            }\n        });\n        const data = await response.json();\n        if (!response.ok || data.rt_cd !== '0') {\n            console.error('KOSPI List API Error:', data);\n            // API 호출 실패시 주요 종목만이라도 반환\n            return majorStocks;\n        }\n        return [\n            ...majorStocks,\n            ...data.output || []\n        ];\n    } catch (error) {\n        console.error('Error fetching KOSPI list:', error);\n        // 에러 발생시 주요 종목만이라도 반환\n        return getInitialStockList();\n    }\n}\nasync function getValidTokenFromDB() {\n    try {\n        const { data, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('access_tokens').select('*').gt('expires_at', new Date().toISOString()).order('created_at', {\n            ascending: false\n        }).limit(1).single();\n        if (error) {\n            console.error('DB token fetch error:', error);\n            return null;\n        }\n        return data?.token || null;\n    } catch (error) {\n        console.error('Error getting token from DB:', error);\n        return null;\n    }\n}\nasync function saveTokenToDB(token) {\n    try {\n        // 기존 토큰들 모두 삭제\n        await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('access_tokens').delete().neq('token', 'dummy');\n        const now = new Date();\n        const expiresAt = new Date(now.getTime() + 23 * 60 * 60 * 1000); // 23시간 후 만료\n        // 새 토큰 저장\n        const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('access_tokens').insert([\n            {\n                token,\n                created_at: now.toISOString(),\n                expires_at: expiresAt.toISOString()\n            }\n        ]);\n        if (error) throw error;\n    } catch (error) {\n        console.error('Error saving token to DB:', error);\n        throw error;\n    }\n}\nasync function getAccessToken() {\n    try {\n        // 이미 진행 중인 토큰 요청이 있다면 해당 Promise 반환\n        if (tokenRequestPromise) {\n            return tokenRequestPromise;\n        }\n        // 캐시된 토큰 확인\n        const existingToken = await getCachedToken();\n        if (existingToken) {\n            return existingToken;\n        }\n        // 새로운 토큰 요청 Promise 생성\n        tokenRequestPromise = (async ()=>{\n            try {\n                // 토큰 발급 요청 제한 체크\n                if (lastTokenRequestTime && Date.now() - lastTokenRequestTime < TOKEN_REQUEST_INTERVAL) {\n                    const waitTime = TOKEN_REQUEST_INTERVAL - (Date.now() - lastTokenRequestTime);\n                    console.log(`Waiting ${Math.ceil(waitTime / 1000)}초 for token request limit...`);\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                }\n                console.log('Requesting new token...');\n                lastTokenRequestTime = Date.now();\n                const response = await fetch(`${BASE_URL}/oauth2/tokenP`, {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        grant_type: 'client_credentials',\n                        appkey: \"PS1rVcaHoaeogJqwa19KaCneBYEw07bymPiX\",\n                        appsecret: \"q5NUDhtegTL+n8CgqmyTCB12orbBI0EljxtH3UJ7OkNzbh4vbPiEjqQCnnTAtxIqUWIvcDQZ9a667ygwDCHrBFroKYny3MkD/Y0J+H4qNZAYfwBIe3gxZqoNXi1lQ5TFVK22gK8wiMLQ2bznUfUMgdWqy0MpCcyJ2+3T5yoGRj4O4DfxsZI=\"\n                    })\n                });\n                const data = await response.json();\n                if (!response.ok || !data.access_token) {\n                    if (data.error_code === 'EGW00133') {\n                        // 토큰 발급 제한에 걸린 경우, 1분 후 재시도\n                        console.log('Token request limit reached, retrying in 1 minute...');\n                        await new Promise((resolve)=>setTimeout(resolve, TOKEN_REQUEST_INTERVAL));\n                        return getAccessToken();\n                    }\n                    console.error('Token API Error:', data);\n                    throw new Error(data.error_description || 'Failed to get access token');\n                }\n                // 토큰 캐싱\n                cachedToken = data.access_token;\n                tokenExpiry = Date.now() + data.expires_in * 1000;\n                await saveTokenToDB(data.access_token);\n                return data.access_token;\n            } finally{\n                // 요청이 완료되면 Promise 초기화\n                tokenRequestPromise = null;\n            }\n        })();\n        return tokenRequestPromise;\n    } catch (error) {\n        console.error('Error getting access token:', error);\n        throw error;\n    }\n}\nasync function getCachedToken() {\n    try {\n        // 메모리에 캐시된 토큰이 있고 만료되지 않았다면 사용\n        if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n            return cachedToken;\n        }\n        // DB에서 유효한 토큰 조회\n        const validToken = await getValidTokenFromDB();\n        if (validToken) {\n            cachedToken = validToken;\n            // 토큰 만료 10분 전까지만 사용\n            tokenExpiry = new Date().getTime() + (23 * 60 - 10) * 60 * 1000;\n            return validToken;\n        }\n        return null;\n    } catch (error) {\n        console.error('Error getting cached token:', error);\n        return null;\n    }\n}\n// API 호출 시 토큰 만료 체크 및 재시도 로직\nasync function fetchWithTokenRetry(url, options, retryCount = 0) {\n    try {\n        const response = await fetch(url, options);\n        const data = await response.json();\n        // 토큰 만료 또는 유효하지 않은 토큰\n        if (data.rt_cd === '1' && (data.msg_cd === 'EGW00121' || data.msg1?.includes('token'))) {\n            if (retryCount >= 2) {\n                throw new Error('Max retry count exceeded');\n            }\n            console.log('Token invalid or expired, getting new token...');\n            // 기존 토큰 삭제\n            await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('access_tokens').delete().neq('token', 'dummy');\n            const newToken = await getAccessToken();\n            options.headers.authorization = `Bearer ${newToken}`;\n            return fetchWithTokenRetry(url, options, retryCount + 1);\n        }\n        return new Response(JSON.stringify(data), {\n            status: response.status,\n            headers: response.headers\n        });\n    } catch (error) {\n        console.error('Error in fetchWithTokenRetry:', error);\n        throw error;\n    }\n}\n// getKospiStocks 함수 수정\nasync function getKospiStocks(stockCode) {\n    try {\n        const token = await getAccessToken();\n        const url = new URL(`${BASE_URL}/uapi/domestic-stock/v1/quotations/inquire-price`);\n        url.searchParams.append('FID_COND_MRKT_DIV_CODE', 'J');\n        url.searchParams.append('FID_INPUT_ISCD', stockCode);\n        const response = await fetchWithTokenRetry(url.toString(), {\n            method: 'GET',\n            headers: {\n                'content-type': 'application/json',\n                authorization: `Bearer ${token}`,\n                appkey: \"PS1rVcaHoaeogJqwa19KaCneBYEw07bymPiX\",\n                appsecret: \"q5NUDhtegTL+n8CgqmyTCB12orbBI0EljxtH3UJ7OkNzbh4vbPiEjqQCnnTAtxIqUWIvcDQZ9a667ygwDCHrBFroKYny3MkD/Y0J+H4qNZAYfwBIe3gxZqoNXi1lQ5TFVK22gK8wiMLQ2bznUfUMgdWqy0MpCcyJ2+3T5yoGRj4O4DfxsZI=\",\n                tr_id: 'FHKST01010100',\n                custtype: 'P'\n            }\n        });\n        const data = await response.json();\n        if (!response.ok || data.rt_cd !== '0') {\n            console.error('Stock API Error:', data);\n            throw new _types_error__WEBPACK_IMPORTED_MODULE_0__.KoreaInvestmentError(data.msg1 || 'Failed to fetch stock data');\n        }\n        return data;\n    } catch (error) {\n        console.error('Error fetching stock data:', error);\n        throw error;\n    }\n}\nasync function getChartFromDB(stockCode, period) {\n    try {\n        const { data, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('stock_charts').select('chart_data').eq('stock_code', stockCode).eq('period', period).gt('updated_at', new Date(Date.now() - 1000 * 60 * 60).toISOString()) // 1시간 이내 데이터만\n        .single();\n        if (error) return null;\n        return data?.chart_data;\n    } catch (error) {\n        console.error('Error getting chart from DB:', error);\n        return null;\n    }\n}\nasync function saveChartToDB(stockCode, period, chartData) {\n    try {\n        const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('stock_charts').upsert({\n            stock_code: stockCode,\n            period: period,\n            chart_data: chartData,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: 'stock_code_period'\n        });\n        if (error) throw error;\n    } catch (error) {\n        console.error('Error saving chart to DB:', error);\n    }\n}\nasync function getStockChart(params) {\n    try {\n        const token = await getAccessToken();\n        const url = new URL(`${BASE_URL}/uapi/domestic-stock/v1/quotations/inquire-daily-itemchartprice`);\n        url.searchParams.append('fid_cond_mrkt_div_code', 'J');\n        url.searchParams.append('fid_input_iscd', params.code);\n        url.searchParams.append('fid_input_date_1', params.inqStrtDd || '');\n        url.searchParams.append('fid_input_date_2', params.inqEndDd || '');\n        url.searchParams.append('fid_period_div_code', params.period);\n        if (params.unit) {\n            url.searchParams.append('fid_input_hour_1', '0900');\n            url.searchParams.append('fid_price_div_code', params.unit);\n        }\n        const response = await fetch(url, {\n            headers: {\n                'content-type': 'application/json',\n                authorization: `Bearer ${token}`,\n                appkey: \"PS1rVcaHoaeogJqwa19KaCneBYEw07bymPiX\",\n                appsecret: \"q5NUDhtegTL+n8CgqmyTCB12orbBI0EljxtH3UJ7OkNzbh4vbPiEjqQCnnTAtxIqUWIvcDQZ9a667ygwDCHrBFroKYny3MkD/Y0J+H4qNZAYfwBIe3gxZqoNXi1lQ5TFVK22gK8wiMLQ2bznUfUMgdWqy0MpCcyJ2+3T5yoGRj4O4DfxsZI=\",\n                tr_id: params.trId,\n                custtype: 'P'\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error('Chart API Error:', errorData);\n            throw new _types_error__WEBPACK_IMPORTED_MODULE_0__.KoreaInvestmentError(errorData.msg1 || '차트 데이터를 가져오는데 실패했습니다.', errorData.rt_cd);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching chart data:', error);\n        throw error;\n    }\n}\n// 오늘 날짜를 YYYYMMDD 형식으로 반환\nfunction getTodayDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}${month}${day}`;\n}\n// 기간에 따른 시작일을 YYYYMMDD 형식으로 반환\nfunction getPeriodStartDate(period) {\n    const today = new Date();\n    let startDate = new Date();\n    switch(period){\n        case '1D':\n            startDate = new Date(today);\n            break;\n        case '1W':\n            startDate.setDate(today.getDate() - 7);\n            break;\n        case '1M':\n            startDate.setMonth(today.getMonth() - 1);\n            break;\n        case '3M':\n            startDate.setMonth(today.getMonth() - 3);\n            break;\n        case '6M':\n            startDate.setMonth(today.getMonth() - 6);\n            break;\n        case '1Y':\n            startDate.setFullYear(today.getFullYear() - 1);\n            break;\n        default:\n            startDate.setMonth(today.getMonth() - 1); // 기본값 1개월\n    }\n    const year = startDate.getFullYear();\n    const month = String(startDate.getMonth() + 1).padStart(2, '0');\n    const day = String(startDate.getDate()).padStart(2, '0');\n    return `${year}${month}${day}`;\n}\nfunction getPeriodParams(period, stockCode) {\n    const today = new Date();\n    let startDate = new Date();\n    switch(period){\n        case '1D':\n            startDate = new Date(today);\n            break;\n        case '1W':\n            startDate.setDate(today.getDate() - 7);\n            break;\n        case '1M':\n            startDate.setMonth(today.getMonth() - 1);\n            break;\n        case '3M':\n            startDate.setMonth(today.getMonth() - 3);\n            break;\n        case '6M':\n            startDate.setMonth(today.getMonth() - 6);\n            break;\n        case '1Y':\n            startDate.setFullYear(today.getFullYear() - 1);\n            break;\n        case '3Y':\n            startDate.setFullYear(today.getFullYear() - 3);\n            break;\n        case '5Y':\n            startDate.setFullYear(today.getFullYear() - 5);\n            break;\n        default:\n            startDate.setMonth(today.getMonth() - 1);\n    }\n    return {\n        FID_COND_MRKT_DIV_CODE: 'J',\n        FID_INPUT_ISCD: stockCode,\n        FID_PERIOD_DIV_CODE: 'D',\n        FID_ORG_ADJ_PRC: '1',\n        START_DT: startDate.toISOString().slice(0, 10).replace(/-/g, ''),\n        END_DT: today.toISOString().slice(0, 10).replace(/-/g, '')\n    };\n}\nasync function getStockPricesFromDB() {\n    try {\n        const { data, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('stock_prices').select('*').order('code');\n        if (error) throw error;\n        return data || [];\n    } catch (error) {\n        console.error('Error fetching stock prices from DB:', error);\n        return [];\n    }\n}\nasync function updateStockPriceInDB(stockData) {\n    try {\n        const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('stock_prices').upsert({\n            code: stockData.code,\n            price: stockData.price,\n            change: stockData.change,\n            changeRate: stockData.changeRate,\n            volume: stockData.volume,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: 'code'\n        });\n        if (error) throw error;\n    } catch (error) {\n        console.error('Error updating stock price in DB:', error);\n    }\n}\n// 백그라운드에서 주기적으로 가격 업데이트\nasync function updateAllStockPrices() {\n    try {\n        const stocks = MAJOR_STOCKS;\n        const updatedPrices = [];\n        // 순차적으로 처리하여 API 호출 제한 준수\n        for (const stock of stocks){\n            try {\n                const data = await getKospiStocks(stock.code);\n                if (data.output) {\n                    const price = {\n                        code: stock.code,\n                        price: parseInt(data.output.stck_prpr, 10),\n                        change: parseInt(data.output.prdy_vrss, 10),\n                        changeRate: parseFloat(data.output.prdy_ctrt),\n                        volume: parseInt(data.output.acml_vol, 10),\n                        updated_at: new Date().toISOString()\n                    };\n                    // DB에 가격 정보 업데이트\n                    const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_1__.supabase.from('stock_prices').upsert([\n                        price\n                    ], {\n                        onConflict: 'code'\n                    });\n                    if (error) throw error;\n                    updatedPrices.push(price);\n                    // API 호출 간격 조절 (0.5초)\n                    await new Promise((resolve)=>setTimeout(resolve, 500));\n                }\n            } catch (error) {\n                console.error(`Error updating price for ${stock.code}:`, error);\n            }\n        }\n        return updatedPrices;\n    } catch (error) {\n        console.error('Error updating all stock prices:', error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/korea-investment/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase/client.ts":
/*!************************************!*\
  !*** ./src/lib/supabase/client.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nif (false) {}\nif (false) {}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://uypvrugprpujbbaudtoi.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV5cHZydWdwcnB1amJiYXVkdG9pIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU2MTY1ODcsImV4cCI6MjA1MTE5MjU4N30.a471ztj9PPT9bAhmaDUHilsoC0CVk2o_ri2nsHxOSEs\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlL2NsaWVudC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUVyRCxJQUFJLEtBQXFDLEVBQUUsRUFFMUM7QUFFRCxJQUFJLEtBQTBDLEVBQUUsRUFFL0M7QUFFTSxNQUFNTSxXQUFXTixtRUFBWUEsQ0FDbENDLDBDQUFvQyxFQUNwQ0Esa05BQXlDLEVBQ3pDIiwic291cmNlcyI6WyJDOlxcQ29kaW5nXFxBSS1UcmFkZXJcXHNyY1xcbGliXFxzdXBhYmFzZVxcY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XHJcblxyXG5pZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCkge1xyXG4gIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBlbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMJyk7XHJcbn1cclxuXHJcbmlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChcclxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwsXHJcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVlcclxuKTsgIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJFcnJvciIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwic3VwYWJhc2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/error.ts":
/*!****************************!*\
  !*** ./src/types/error.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KoreaInvestmentError: () => (/* binding */ KoreaInvestmentError)\n/* harmony export */ });\nclass KoreaInvestmentError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'KoreaInvestmentError';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMvZXJyb3IudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLDZCQUE2QkM7SUFDeENDLFlBQVlDLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGIiwic291cmNlcyI6WyJDOlxcQ29kaW5nXFxBSS1UcmFkZXJcXHNyY1xcdHlwZXNcXGVycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBLb3JlYUludmVzdG1lbnRFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgdGhpcy5uYW1lID0gJ0tvcmVhSW52ZXN0bWVudEVycm9yJztcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbIktvcmVhSW52ZXN0bWVudEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJuYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/types/error.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fstocks%2Fchart%2Froute&page=%2Fapi%2Fstocks%2Fchart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstocks%2Fchart%2Froute.ts&appDir=C%3A%5CCoding%5CAI-Trader%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CCoding%5CAI-Trader&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();